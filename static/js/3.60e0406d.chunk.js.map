{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["checkoutSummary","props","className","classes","CheckoutSummary","style","width","height","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","fromElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","onChangeHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","Label","label","module","exports"],"mappings":"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","file":"static/js/3.60e0406d.chunk.js","sourcesContent":["import React from 'react'\nimport Burger from '../../Burger/Burger'\nimport Button from '../../UI/Button/Button'\nimport classes from './CheckoutSummary.module.css'\n\nconst checkoutSummary = (props) => {\n    return (\n        <div className={classes.CheckoutSummary}>\n            <h1>We hope it tastes well!</h1>\n            <div style={{width: '100%', height: '300px', margin: 'auto'}}>\n                <Burger ingredients={props.ingredients} />\n            </div>\n            <Button \n                btnType=\"Danger\"\n                clicked={props.checkoutCancelled}>CANCEL</Button>\n            <Button \n                btnType=\"Success\"\n                clicked={props.checkoutContinued}>CONTINUE</Button>\n        </div>\n    )\n}\n\nexport default checkoutSummary","import React, { Component } from 'react'\nimport classes from './ContactData.module.css'\nimport Button from '../../../components/UI/Button/Button'\nimport axios from '../../../axios-orders'\nimport Spinner from '../../../components/UI/Spinner/Spinner'\nimport Input from '../../../components/UI/Input/Input'\nimport { connect } from 'react-redux'\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport { updateObject, checkValidity } from '../../../shared/utility'\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Zip Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 4,\n                    maxLength: 4\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your Email'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue: 'Fastest'},\n                        {value: 'cheapest', displayValue: 'Cheapest'},\n                    ]\n                },\n                value: 'fastest',\n                validation: {},\n                valid: true\n            }\n        },\n        formIsValid: false,\n    }\n\n    orderHandler = (event) => {\n        // Use preventDefault to prevent reloading the page when click submit form button.\n        event.preventDefault()\n        const formData = {}\n        for (let fromElementIdentifier in this.state.orderForm) {\n            formData[fromElementIdentifier] = this.state.orderForm[fromElementIdentifier].value\n        }\n\n        const order = {\n            ingredients: this.props.ings,\n            price: this.props.price,\n            orderData: formData,\n            userId: this.props.userId\n        }\n        this.props.onOrderBurger(order, this.props.token)\n    }\n\n    onChangeHandler = (event, inputIdentifier) => {\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\n            value: event.target.value,\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\n            touched: true\n        })\n        const updatedOrderForm = updateObject(this.state.orderForm, {\n            [inputIdentifier]: updatedFormElement\n        })\n        \n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid\n        }\n\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid})\n    }\n\n    render () {\n        const formElementsArray = []\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            })\n        }\n\n        let form = (\n                <form onSubmit={this.orderHandler}>\n                    {formElementsArray.map(formElement => (\n                        <Input \n                            elementType={formElement.config.elementType} \n                            elementConfig={formElement.config.elementConfig} \n                            value={formElement.config.value} \n                            key={formElement.id} \n                            invalid={!formElement.config.valid}\n                            shouldValidate={formElement.config.validation}\n                            touched={formElement.config.touched}\n                            changed={(event) => this.onChangeHandler(event, formElement.id)} />\n                    ))}\n                    \n                    <Button btnType=\"Success\" disabled={!this.state.formIsValid} clicked={this.orderHandler}>Order</Button>\n                </form>\n        );\n        if (this.props.loading) {\n            form = <Spinner />\n        }\n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter your contact data:</h4>\n                {form}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios))","import React, { Component } from 'react'\nimport { Route, Redirect } from 'react-router-dom'\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary'\nimport { connect } from 'react-redux'\nimport ContactData from './ContactData/ContactData'\n\nclass Checkout extends Component {\n\n    checkoutCancelledHandler = () => {\n        this.props.history.goBack();\n    }\n\n    checkoutContinuedHandler = () => {\n        this.props.history.replace('/checkout/contact-data')\n    }\n\n    render () {\n        let summary = <Redirect to=\"/\" />\n        \n        if(this.props.ings) {\n            const purchasedRedirect = this.props.purchased ? <Redirect to='/' /> : null;\n            summary = (\n                <div>\n                    {purchasedRedirect}\n                    <CheckoutSummary \n                        ingredients={this.props.ings}\n                        checkoutCancelled={this.checkoutCancelledHandler}\n                        checkoutContinued={this.checkoutContinuedHandler} />\n                    <Route \n                        path={this.props.match.path + '/contact-data'} \n                        component={ContactData} /> \n\n                    {/* \n                        The following code can't pass props to the child component. So instead of using 'component' in the router,\n                        we can also use 'render' to render a component with passing props.\n                    \n                    <Route \n                        path={this.props.match.path + '/contact-data'} \n                        component={ContactData} />  */}\n                </div>\n            )\n        }\n        return (\n            <div>\n                {summary}\n                \n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        purchased: state.order.purchased\n    }\n}\n\nexport default connect( mapStateToProps )(Checkout);","import React from 'react'\nimport classes from './Input.module.css'\n\nconst input = (props) => { \n    let inputElement = null;\n    const inputClasses = [classes.InputElement]\n\n    if(props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid)\n    }\n\n    switch (props.elementType) {\n        case ('input'):\n            inputElement = <input \n                className={inputClasses.join(' ')} \n                {...props.elementConfig} \n                value={props.value} \n                onChange={props.changed} />\n            break;\n        case ('textarea'):\n            inputElement = <textarea \n                className={inputClasses.join(' ')} \n                {...props.elementConfig} \n                value={props.value}\n                onChange={props.changed} />\n            break;\n        case ('select'):\n            inputElement = <select \n                className={inputClasses.join(' ')} \n                value={props.value}\n                onChange={props.changed} >\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>{option.displayValue}</option>\n                    ))}\n\n                </select>\n            break;\n        default:\n            inputElement = <input \n                className={inputClasses.join(' ')} \n                {...props.elementConfig} \n                value={props.value}\n                onChange={props.changed} />\n    }\n\n    return (\n        <div className={classes.Input} >\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    )\n}\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__20AK_\"};"],"sourceRoot":""}